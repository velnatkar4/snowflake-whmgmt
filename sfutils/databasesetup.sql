USE ROLE ACCOUNTADMIN;

/* Create Roles for Warehouse setup */
CREATE OR REPLACE ROLE ROLE_WH_USER_XS_USAGE;
CREATE OR REPLACE ROLE ROLE_WH_USER_S_USAGE;
CREATE OR REPLACE ROLE ROLE_WH_USER_M_USAGE;
CREATE OR REPLACE ROLE ROLE_WH_USER_L_USAGE;

CREATE OR REPLACE ROLE ROLE_WH_USER_XS_ADMIN;
CREATE OR REPLACE ROLE ROLE_WH_USER_S_ADMIN;
CREATE OR REPLACE ROLE ROLE_WH_USER_M_ADMIN;
CREATE OR REPLACE ROLE ROLE_WH_USER_L_ADMIN;

GRANT OWNERSHIP ON ROLE ROLE_WH_USER_S_USAGE TO ROLE ROLE_USER_ADMIN ;
GRANT OWNERSHIP ON ROLE ROLE_WH_USER_M_USAGE TO ROLE ROLE_USER_ADMIN ;
GRANT OWNERSHIP ON ROLE ROLE_WH_USER_L_USAGE TO ROLE ROLE_USER_ADMIN ;

GRANT USAGE ON WAREHOUSE WH_USER_XS TO ROLE ROLE_WH_USER_XS_USAGE;
GRANT USAGE ON WAREHOUSE WH_USER_S TO ROLE ROLE_WH_USER_S_USAGE;
GRANT USAGE ON WAREHOUSE WH_USER_M TO ROLE ROLE_WH_USER_M_USAGE;
GRANT USAGE ON WAREHOUSE WH_USER_L TO ROLE ROLE_WH_USER_L_USAGE;

/* Create Warehouse with different T-shirt size */
CREATE OR REPLACE WAREHOUSE IDENTIFIER('"WH_USER_XS"') 
COMMENT = 'X-SMALL USER WH' 
WAREHOUSE_SIZE = 'X-Small' AUTO_RESUME = true
AUTO_SUSPEND = 60 
WAREHOUSE_TYPE = 'STANDARD' 
MIN_CLUSTER_COUNT = 1 
MAX_CLUSTER_COUNT = 1 SCALING_POLICY = 'STANDARD';

CREATE OR REPLACE WAREHOUSE IDENTIFIER('"WH_USER_S"') 
COMMENT = 'SMALL USER WH' 
WAREHOUSE_SIZE = 'Small' AUTO_RESUME = true 
AUTO_SUSPEND = 60 
WAREHOUSE_TYPE = 'STANDARD' 
MIN_CLUSTER_COUNT = 1 
MAX_CLUSTER_COUNT = 1 SCALING_POLICY = 'STANDARD';

CREATE OR REPLACE WAREHOUSE IDENTIFIER('"WH_USER_M"') 
COMMENT = 'MEDIUM USER WH' 
WAREHOUSE_SIZE = 'Medium' AUTO_RESUME = true
AUTO_SUSPEND = 60 
WAREHOUSE_TYPE = 'STANDARD' 
MIN_CLUSTER_COUNT = 1 
MAX_CLUSTER_COUNT = 1 SCALING_POLICY = 'STANDARD';

CREATE OR REPLACE WAREHOUSE IDENTIFIER('"WH_USER_L"') 
COMMENT = 'LARGE USER WH' 
WAREHOUSE_SIZE = 'Large' AUTO_RESUME = true
AUTO_SUSPEND = 60 
WAREHOUSE_TYPE = 'STANDARD' 
MIN_CLUSTER_COUNT = 1 
MAX_CLUSTER_COUNT = 1 SCALING_POLICY = 'STANDARD';

/* Create Users and Roles */
CREATE OR REPLACE ROLE ROLE_USER_JOHN;
CREATE OR REPLACE ROLE ROLE_USER_MIKE;
CREATE OR REPLACE ROLE ROLE_USER_KING;
CREATE OR REPLACE ROLE ROLE_USER_ADMIN;

CREATE OR REPLACE USER USER_JOHN 
CREATE OR REPLACE USER USER_MIKE;
CREATE OR REPLACE USER USER_KING;
CREATE OR REPLACE USER USER_ADMIN;

ALTER USER IDENTIFIER('"USER_JOHN"') set PASSWORD = 'John123#';
ALTER USER IDENTIFIER('"USER_MIKE"') set PASSWORD = 'Mike123#';
ALTER USER IDENTIFIER('"USER_KING"') set PASSWORD = 'King123#';
ALTER USER IDENTIFIER('"USER_ADMIN"') set PASSWORD = 'Adminhere3#';

CREATE OR REPLACE ROLE ROLE_DEMO_DB_USAGE;
CREATE OR REPLACE ROLE ROLE_DEMP_SCHM_USAGE;

/* Create DEMP databaes and schema */
CREATE DATABASE DEMO_DB;
USE DATABASE DEMO_DB;
CREATE SCHEMA DEMO_SCHM;

GRANT USAGE ON DATABASE DEMO_DB TO ROLE ROLE_DEMO_DB_USAGE;
GRANT USAGE ON SCHEMA DEMO_SCHM TO ROLE ROLE_DEMP_SCHM_USAGE;

GRANT ROLE ROLE_DEMO_DB_USAGE TO ROLE ROLE_USER_JOHN;
GRANT ROLE ROLE_DEMO_DB_USAGE TO ROLE ROLE_USER_MIKE;
GRANT ROLE ROLE_DEMO_DB_USAGE TO ROLE ROLE_USER_KING;
GRANT ROLE ROLE_DEMO_DB_USAGE TO ROLE ROLE_USER_ADMIN;

GRANT ROLE ROLE_DEMP_SCHM_USAGE TO ROLE ROLE_USER_JOHN;
GRANT ROLE ROLE_DEMP_SCHM_USAGE TO ROLE ROLE_USER_MIKE;
GRANT ROLE ROLE_DEMP_SCHM_USAGE TO ROLE ROLE_USER_KING;
GRANT ROLE ROLE_DEMP_SCHM_USAGE TO ROLE ROLE_USER_ADMIN;

/* Grant WH roles to User */
GRANT ROLE ROLE_WH_USER_XS_USAGE TO ROLE ROLE_USER_JOHN;
GRANT ROLE ROLE_WH_USER_XS_USAGE TO ROLE ROLE_USER_MIKE;
GRANT ROLE ROLE_WH_USER_XS_USAGE TO ROLE ROLE_USER_KING;
GRANT ROLE ROLE_WH_USER_XS_USAGE TO ROLE ROLE_USER_ADMIN;

/* Grant User roles to Users */
GRANT ROLE ROLE_USER_JOHN TO USER USER_JOHN;
GRANT ROLE ROLE_USER_MIKE TO USER USER_MIKE;
GRANT ROLE ROLE_USER_KING TO USER USER_KING;
GRANT ROLE ROLE_USER_ADMIN TO USER USER_ADMIN;

/* Validate User grants */
SHOW GRANTS TO ROLE ROLE_USER_ADMIN;

--========================================
--Login as ADMIN
--========================================
USE ROLE ROLE_USER_ADMIN;
USE DATABASE DEMO_DB;
USE SCHEMA DEMO_SCHM;
USE WAREHOUSE WH_USER_XS;
SHOW GRANTS TO ROLE ROLE_USER_ADMIN;
GRANT ROLE ROLE_WH_USER_S_USAGE TO ROLE ROLE_USER_JOHN;

--========================================
--Login as JOHN
--========================================
--login use user JOHN and validate access to (SMALL) warehouse provisioned by ADMIN
USE ROLE ROLE_USER_JOHN;
USE DATABASE DEMO_DB;
USE SCHEMA DEMO_SCHM;
USE WAREHOUSE WH_USER_XS;
SHOW GRANTS TO ROLE ROLE_USER_JOHN;
SHOW GRANTS TO ROLE ROLE_WH_USER_S_USAGE;
USE WAREHOUSE WH_USER_XS;
USE WAREHOUSE WH_USER_S;

--========================================
--Create metadata table
--========================================
SELECT CURRENT_USER;
--Create Metadata Table
USE DATABASE DEMO_DB;
USE SCHEMA DEMO_SCHM;
CREATE OR REPLACE TABLE WH_REQUEST_TRACKER
(
REQUEST_NUMBER      INTEGER DEFAULT WH_SEQ_REQUEST.nextval,
REQUEST_USER	    VARCHAR(120),
REQUEST_COMPUTE	    VARCHAR(30) DEFAULT 'SMALL',
REQUEST_REASON	    VARCHAR(300),
REQUEST_TIMESTAMP	TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
REVIEW_USER	        VARCHAR(120),
REVIEW_STATUS		INTEGER,
REVIEW_TIMESTAMP	TIMESTAMP,
EMAIL_STATUS	    INTEGER DEFAULT 0
);

--Load requet data and validate
INSERT INTO WH_REQUEST_TRACKER 
(
REQUEST_USER,
REQUEST_COMPUTE,
REQUEST_REASON
)
VALUES
(CURRENT_USER,'SMALL','Marketting Model Run');

SELECT REQUEST_USER,REQUEST_COMPUTE,REQUEST_REASON,
REQUEST_TIMESTAMP,REVIEW_USER
FROM WH_REQUEST_TRACKER;

WITH CTE_COPY_HST AS
(
      SELECT  TABLE_SCHEMA_NAME,
              TABLE_NAME,
              DATE_TRUNC('SECOND', LAST_LOAD_TIME) AS LAST_LOAD_TIME_HR,
              SUM(FILE_SIZE) AS BYTES_FILE_SIZE,
              SUM(CASE WHEN FILE_SIZE > 0 THEN FILE_SIZE/POWER(1024, 3)::DECIMAL(12,2)
                      ELSE FILE_SIZE::DECIMAL(12,2)
                      END) AS GiB_FILE_SIZE,
  
              MIN(CASE WHEN FILE_SIZE > 0 THEN FILE_SIZE/POWER(1024, 2)::DECIMAL(12,2)
                                  ELSE FILE_SIZE::DECIMAL(12,2)
                                  END) AS MIN_MB_FILE_SIZE,

              MAX(CASE WHEN FILE_SIZE > 0 THEN FILE_SIZE/POWER(1024, 2)::DECIMAL(12,2)
                                  ELSE FILE_SIZE::DECIMAL(12,2)
                                  END) AS MAX_MB_FILE_SIZE,
  
              AVG(CASE WHEN FILE_SIZE > 0 THEN FILE_SIZE/POWER(1024, 2)::DECIMAL(12,2)
                                              ELSE FILE_SIZE::DECIMAL(12,2)
                                              END) AS AVG_MB_FILE_SIZE,
  
              SUM(ROW_COUNT) AS ROW_COUNT,
              SUM(ROW_PARSED) AS ROW_PARSED,
              COUNT(FILE_NAME) AS FILE_COUNT
      FROM SNOWFLAKE.ACCOUNT_USAGE.COPY_HISTORY
      WHERE LAST_LOAD_TIME::DATE = CURRENT_DATE - 1
      GROUP BY ALL
),
CTE_QRY_HST AS
(
    SELECT  USER_NAME
           ,DATE_TRUNC('SECOND', START_TIME) AS START_TIME_HR
           ,START_TIME::DATE as THE_DT
           ,QUERY_ID           
           ,QUERY_TEXT
           ,SUBSTR(QUERY_TEXT,POSITION('.', QUERY_TEXT, 1)+1) AS TABLE_STR
           ,UPPER(TRIM(SUBSTR(TABLE_STR,1,POSITION(' ', TABLE_STR, 1)))) AS TABLE_NAME
           ,QUERY_TYPE          
           ,WAREHOUSE_SIZE
           ,WAREHOUSE_NAME
           ,EXECUTION_STATUS
           ,((EXECUTION_TIME/(60000))) AS EXEC_TIME_MIN
           ,((TOTAL_ELAPSED_TIME/(60000))) AS TOTAL_ELAPSED_MIN
           ,ROWS_PRODUCED
           ,ERROR_MESSAGE
           ,BYTES_WRITTEN
           ,CASE WHEN BYTES_WRITTEN > 0 THEN BYTES_WRITTEN/POWER(1024, 3)::DECIMAL(12,2)
                ELSE BYTES_WRITTEN::DECIMAL(12,2)
                END AS GiB_WRITTEN
           ,CASE
              WHEN QUERY_TYPE = 'COPY' THEN
                CASE 
                  WHEN BYTES_WRITTEN between 0             and 34359738367   THEN 'X-Small'
                  WHEN BYTES_WRITTEN between 34359738368   and 68719476735   THEN 'Small'
                  WHEN BYTES_WRITTEN between 68719476736   and 137438953471  THEN 'Medium'
                  WHEN BYTES_WRITTEN between 137438953472  and 274877906943  THEN 'Large'
                  WHEN BYTES_WRITTEN between 274877906944  and 549755813887  THEN 'X-Large'
                  WHEN BYTES_WRITTEN between 549755813888  and 1099511627775 THEN '2X-Large'
                  WHEN BYTES_WRITTEN between 1099511627776 and 2199023255551 THEN '3X-Large'
                  WHEN BYTES_WRITTEN between 2199023255552 and 4398046511103 THEN '4X-Large'
                  WHEN BYTES_WRITTEN between 4398046511104 and 8796093022207 THEN '5X-Large'
                  ELSE '6X-Large'
                 END
               ELSE 'N/A'
              END AS VWH_RECOMMENDEDV2
FROM FROM SNOWFLAKE.ACCOUNT_USAGE.QUERY_HISTORY QH
     WHERE START_TIME::DATE >= CURRENT_DATE - 1
     AND QUERY_TYPE='COPY'
     AND EXECUTION_TIME > 0.1
     AND WAREHOUSE_NAME IS NOT NULL
     AND CLUSTER_NUMBER IS NOT NULL
)
SELECT a.USER_NAME                          AS USER_NAME,
       a.START_TIME_HR                      AS START_TIME,
       a.TABLE_NAME                         AS TABLE_NAME,
       a.WAREHOUSE_NAME                     AS WAREHOUSE_NAME,
       a.WAREHOUSE_SIZE                     AS VWH_SIZE_USED,
       CASE
            WHEN (b.FILE_COUNT <= 24 AND GREATEST(a.GiB_WRITTEN,b.GiB_FILE_SIZE) <= 4 AND b.AVG_MB_FILE_SIZE <= 250 ) THEN 'X-Small'
            WHEN ((b.FILE_COUNT <= 64 AND GREATEST(a.GiB_WRITTEN,b.GiB_FILE_SIZE) <= 16) AND b.AVG_MB_FILE_SIZE <= 250 ) THEN 'Small'
            WHEN ((b.FILE_COUNT <= 128 AND GREATEST(a.GiB_WRITTEN,b.GiB_FILE_SIZE) <= 32) AND b.AVG_MB_FILE_SIZE <= 500 ) THEN 'Medium'
            WHEN ((b.FILE_COUNT <= 256 AND GREATEST(a.GiB_WRITTEN,b.GiB_FILE_SIZE) <= 64) AND b.AVG_MB_FILE_SIZE <= 550 ) THEN 'Large'
            WHEN ((b.FILE_COUNT <= 512 AND GREATEST(a.GiB_WRITTEN,b.GiB_FILE_SIZE) <= 128) AND b.AVG_MB_FILE_SIZE <= 750 ) THEN 'X-Large'
            WHEN ((b.FILE_COUNT <= 1024 AND GREATEST(a.GiB_WRITTEN,b.GiB_FILE_SIZE) <= 256) AND b.AVG_MB_FILE_SIZE <= 750 ) THEN '2X-Large'
            WHEN ((GREATEST(a.GiB_WRITTEN,b.GiB_FILE_SIZE) > 256) AND b.AVG_MB_FILE_SIZE <= 750 ) THEN '3X-Large'
          ELSE
            'Analysis-Req.'
       END                                  AS "VWH_SIZE_REC",
       a.GiB_WRITTEN::DECIMAL(12,2)         AS GiB_WRITTEN,
       a.ROWS_PRODUCED                      AS ROWS_WRITTEN,
       b.GiB_FILE_SIZE::DECIMAL(12,2)       AS GiB_FILE_SIZE,
       b.ROW_COUNT                          AS ROWS_FR_FILE,
       b.FILE_COUNT                         AS FILE_COUNT,
       a.EXEC_TIME_MIN::DECIMAL(12,2)       AS EXEC_TIME_MIN,
       a.EXECUTION_STATUS                   AS EXECUTION_STATUS,
       a.BYTES_WRITTEN::DECIMAL(32,2)       AS BYTES_WRITTEN,
       b.BYTES_FILE_SIZE::DECIMAL(32,2)     AS BYTES_FILE_SIZE,      
       b.MIN_MB_FILE_SIZE::DECIMAL(32,2)    AS MIN_MB_FILE_SIZE,
       b.MAX_MB_FILE_SIZE::DECIMAL(32,2)    AS MAX_MB_FILE_SIZE,
       b.AVG_MB_FILE_SIZE::DECIMAL(32,2)    AS AVG_MB_FILE_SIZE,
       CASE WHEN  b.TABLE_NAME IS NULL THEN 'NOT_MATCH' ELSE 'MATCH' END AS COPY_SESSION
FROM CTE_QRY_HST a LEFT OUTER JOIN CTE_COPY_HST b
ON a.TABLE_NAME = b.TABLE_NAME
AND a.START_TIME_HR = b.LAST_LOAD_TIME_HR
WHERE b.TABLE_NAME IS NOT NULL
;
